apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: management
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: kafka-ui
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: kafka-ui
      namespace: management
    spec:
      containers:
      - env:
        - name: SERVICE_NAME
          value: kafka-ui
        - name: DYNAMIC_CONFIG_ENABLED
          value: "true"
        image: provectuslabs/kafka-ui@sha256:477d4c3d896a0deefdcccf0e08e8fb0d4258e5340d34f3c3513f75073de5835c
        imagePullPolicy: IfNotPresent
        name: kafka-ui
        ports:
        - containerPort: 8080
          name: port-8080
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 1Gi
          requests:
            cpu: 500m
            memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 30
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-ui-ing
  namespace: management
spec:
  ingressClassName: nginx
  rules:
  - host: kafka-ui.opsre.net
    http:
      paths:
      - backend:
          service:
            name: kafka-ui
            port:
              number: 8080
        path: /
        pathType: ImplementationSpecific
status:
  loadBalancer:
    ingress:
    - ip: 1.1.1.1
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: kafka-ui
  name: kafka-ui
  namespace: management
spec:
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: port-8080
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: kafka-ui
  sessionAffinity: None
  type: ClusterIP
